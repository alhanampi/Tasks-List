{"version":3,"sources":["Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","_this","this","taskStatus","taskClass","props","tasks","done","react_default","a","createElement","className","text","type","onClick","taskComplete","id","status","eraseTask","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","JSON","parse","localStorage","getItem","inputChange","bind","assertThisInitialized","pushTask","storage","e","setState","taskBar","target","value","newTask","length","taskList","trim","push","alert","taskState","i","taskId","splice","setItem","stringify","_this2","list","map","m","src_Tasks","key","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b3fdbde.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css'\r\n\r\nclass Tasks extends Component {\r\n\r\n\trender() {\r\n\r\n\t\t//changing task status from pending to finished, using fontawesome for the icons:\r\n\t\tlet taskStatus = \"\"\r\n\t\tlet taskClass = \"\"\r\n\t\tif (this.props.tasks.done === false) {\r\n\t\t\ttaskStatus = <i className=\"fas fa-ellipsis-h\"></i>\r\n\t\t} else {\r\n\t\t\ttaskStatus = <i className=\"far fa-check-circle\"></i>\r\n\t\t\ttaskClass = \"tachado\"\r\n\t\t}\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<tr>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<span className={taskClass}> {this.props.tasks.text} </span>\r\n\t\t\t\t\t<span> {this.props.tasks.done} </span>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<button type=\"Button\" className={taskStatus} onClick={() => this.props.taskComplete(this.props.tasks.id)} status={this.props.done}> {taskStatus} </button>\r\n\t\t\t\t</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<button type=\"button\" onClick={() => this.props.eraseTask(this.props.tasks.id)}><i className=\"fas fa-trash-alt\"></i></button>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Tasks;","import React, { Component } from 'react';\nimport './App.css';\nimport Tasks from './Tasks'\n\n//set state with updater and callback. Calling the callback once the info is saved\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { //either tasks data already in localstorage, or the default one\n      tasks: JSON.parse(localStorage.getItem('listData')) ||\n        [{\n          id: 1,\n          text: 'Comprar harina y tomates.',\n          done: false\n        }],\n    }\n\n    //function binding:\n    this.inputChange = this.inputChange.bind(this)\n    this.pushTask = this.pushTask.bind(this)\n    this.eraseTask = this.eraseTask.bind(this)\n    this.taskComplete = this.taskComplete.bind(this)\n    this.storage = this.storage.bind(this)\n\n  }\n\n  //functions:\n  inputChange(e) {\n    this.setState({\n      taskBar: e.target.value\n    })\n  }\n\n  //new elements:\n  pushTask() {\n    const id = this.state.tasks.length === 0 ? (1) : this.state.tasks[this.state.tasks.length - 1].id + 1\n\n    let newTask = {\n      id: id,\n      text: this.state.taskBar,\n      done: false\n    }\n\n    let taskList = this.state.tasks\n\n    //making sure the input is not void:\n    if (newTask.text && newTask.text.trim().length) {\n      taskList.push(newTask)\n    } else {\n      alert('no hay texto')\n    }\n    this.setState({\n      tasks: taskList\n    }, this.storage) //callback\n  }\n\n  //buttons functionality:\n  taskComplete(id) {\n    const taskState = this.state.tasks\n\n    for (var i = 0; i < taskState.length; i++) {\n      if (taskState[i].id === id) {\n        if (taskState[i].done === false) {\n          taskState[i].done = true\n        } else {\n          taskState[i].done = false\n        }\n      }\n      this.setState({\n        tasks: taskState\n      }, this.storage) //callback\n    }\n  }\n\n  eraseTask(id) {\n    const taskId = this.state.tasks\n\n    for (var i = 0; i < taskId.length; i++) {\n      if (taskId[i].id === id) {\n        taskId.splice(i, 1)\n      }\n    }\n    this.setState({\n      tasks: taskId\n    }, this.storage) //callback\n  }\n\n\n  //local storage: \n  storage() {\n    localStorage.setItem('listData', JSON.stringify(this.state.tasks))\n  }\n\n  //rendering:\n  render() {\n\n    const list = this.state.tasks.map((m) => {\n      return <Tasks key={m.id} taskComplete={this.taskComplete} eraseTask={this.eraseTask} tasks={m} />\n    })\n    return (\n\n      <div>\n        <h1>Lista de Tareas</h1>\n        <div className=\"inputBox\">\n\n          <input type=\"text\" value={this.state.taskBar} onChange={this.inputChange} placeholder=\"ingrese tarea nueva\"></input>\n          <button type=\"button\"><i className=\"far fa-clipboard\" onClick={this.pushTask}></i></button>\n        </div>\n        <table>\n          <tbody>\n\n            {list}\n\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}